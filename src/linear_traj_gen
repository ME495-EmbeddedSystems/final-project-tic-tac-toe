 #!/usr/bin/env python

import intera_interface
import rospy
import numpy as np
from geometry_msgs.msg import Pose

def QuinticTimeScaling(Tf, t):
    """Computes s(t) for a quintic time scaling

    :param Tf: Total time of the motion in seconds from rest to rest
    :param t: The current time t satisfying 0 < t < Tf
    :return: The path parameter s(t) corresponding to a fifth-order
             polynomial motion that begins and ends at zero velocity and zero
             acceleration

    Example Input:
        Tf = 2
        t = 0.6
    Output:
        0.16308
    """
    return 10 * (1.0 * t / Tf) ** 3 - 15 * (1.0 * t / Tf) ** 4 \
           + 6 * (1.0 * t / Tf) ** 5

def generate_line_traj(start_pose, end_pose,Tf, N):
    '''
    This function generates a series of waypoints from starting pose, end pose, using quintic time scaling method. The resulting trajectory is linear. 
    Tf: the total time of travel
    Input: geometry_msgs/Pose
    output: geometry_msgs/Pose[]
    '''
    N = int(N)
    timegap = Tf / (N - 1.0)
    traj = [[None]] * N
    pstart = [start_pose.position.x, start_pose.position.y, start_pose.position.z, start_pose.orientation.x, start_pose.orientation.y, start_pose.orientation.z,start_pose.orientation.w]
    pend = [end_pose.position.x, end_pose.position.y, end_pose.position.z, end_pose.orientation.x, end_pose.orientation.y, end_pose.orientation.z, end_pose.orientation.w]
    for i in range(N):
        s = QuinticTimeScaling(Tf, timegap * i)
        coord = s * np.array(pend) + (1 - s) * np.array(pstart)
        traj[i]=Pose()
        traj[i].position.x = coord[0]
        traj[i].position.y = coord[1]
        traj[i].position.z = coord[2]
        traj[i].orientation.x = coord[3]
        traj[i].orientation.y = coord[4]
        traj[i].orientation.z = coord[5]
        traj[i].orientation.w = coord[6]

    return traj


class TrajGen(object):
    def __init__(self, limb="right"):
        self._limb_name = limb # string
        self._limb = intera_interface.Limb(limb)
        
    
def main():
    rospy.init_node("sawyer")
    start=Pose()
    start.position.x = 1
    start.position.y = 2
    start.position.z = 3
    start.orientation.x = 1
    start.orientation.y = 2
    start.orientation.z = 3
    start.orientation.w = 4

    end=Pose()
    end.position.x = 7
    end.position.y = 6
    end.position.z = 5
    end.orientation.x = 4
    end.orientation.y = 5
    end.orientation.z = 7
    end.orientation.w = 6
   
    T = 1
    N = 10
    traj = generate_line_traj(start,end,T,N)

if __name__=='__main__':
    main()
